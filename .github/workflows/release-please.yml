on:
  push:
    branches:
      - main

permissions:
  contents: write

name: auto-release

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get current version
        id: version
        run: |
          # Get the latest version from git tags
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          
          # Extract version numbers (remove 'v' prefix and split by dots)
          version_without_v=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$version_without_v"
          
          # Increment patch version
          new_patch=$((patch + 1))
          new_version="v$major.$minor.$new_patch"
          
          echo "New version: $new_version"
          echo "version=$new_version" >> $GITHUB_OUTPUT
          echo "previous_version=$latest_tag" >> $GITHUB_OUTPUT
      
      - name: Create Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }}
      
      - name: Generate Changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          mode: "COMMIT"
          fromTag: ${{ steps.version.outputs.previous_version }}
          toTag: ${{ steps.version.outputs.version }}
          configurationJson: |
            {
              "template": "## [#{{TO_TAG_VERSION}}](https://github.com/ysmolyar/release-please-test/compare/#{{FROM_TAG}}...#{{TO_TAG}}) (#{{RELEASE_YEAR}}-#{{RELEASE_MONTH}}-#{{RELEASE_DAY}})\n\n\n#{{CHANGELOG}}",
              "categories": [
                {
                  "title": "### Bug Fixes\n\n",
                  "labels": ["fix", "bug", ""]
                }
              ],
              "transformers": [
                {
                  "pattern": "^(.*)$",
                  "target": "* $1 ([#{{COMMIT_SHA_SHORT}}](https://github.com/ysmolyar/release-please-test/commit/#{{COMMIT_SHA}}))"
                }
              ],
              "tag_resolver": {
                "method": "semver"
              },
              "sort": "ASC"
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update CHANGELOG.md
        run: |
          # Get the changelog content from the Release Changelog Builder action
          changelog_content="${{ steps.changelog.outputs.changelog }}"
          
          # Create the new changelog by prepending the new entry
          if [ -f "CHANGELOG.md" ]; then
            # Read existing changelog and prepend new entry
            {
              echo "# Changelog"
              echo ""
              echo "$changelog_content"
              echo ""
              # Skip the header if it exists, otherwise include everything
              if [ "$(head -n 1 CHANGELOG.md)" = "# Changelog" ]; then
                tail -n +3 CHANGELOG.md
              else
                cat CHANGELOG.md
              fi
            } > new_changelog.md
          else
            # Create new changelog file
            {
              echo "# Changelog"
              echo ""
              echo "$changelog_content"
            } > new_changelog.md
          fi
          
          # Replace the original file
          mv new_changelog.md CHANGELOG.md
      
      - name: Commit and Push CHANGELOG.md
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Check if there are changes to commit
          if git diff --quiet CHANGELOG.md; then
            echo "No changes to CHANGELOG.md, skipping commit"
          else
            git add CHANGELOG.md
            git commit -m "docs: update changelog for ${{ steps.version.outputs.version }}"
            git push origin main
          fi
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
