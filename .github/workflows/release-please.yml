on:
  push:
    branches:
      - main

permissions:
  contents: write

name: auto-release

jobs:
  release:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get current version
        id: version
        run: |
          # Get the latest version from git tags
          latest_tag=$(git describe --tags --abbrev=0 2>/dev/null || echo "v0.0.0")
          echo "Latest tag: $latest_tag"
          
          # Extract version numbers (remove 'v' prefix and split by dots)
          version_without_v=${latest_tag#v}
          IFS='.' read -r major minor patch <<< "$version_without_v"
          
          # Increment patch version
          new_patch=$((patch + 1))
          new_version="v$major.$minor.$new_patch"
          
          echo "New version: $new_version"
          echo "version=$new_version" >> $GITHUB_OUTPUT
          echo "previous_version=$latest_tag" >> $GITHUB_OUTPUT
      
      - name: Create Git tag
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          git tag ${{ steps.version.outputs.version }}
          git push origin ${{ steps.version.outputs.version }}
      
      - name: Generate Changelog
        id: changelog
        uses: mikepenz/release-changelog-builder-action@v5
        with:
          mode: "COMMIT"
          fromTag: ${{ steps.version.outputs.previous_version }}
          toTag: ${{ steps.version.outputs.version }}
          configurationJson: |
            {
              "template": "## [#{{TO_TAG}}](https://github.com/ysmolyar/release-please-test/compare/#{{FROM_TAG}}...#{{TO_TAG}}) (#{{RELEASE_DATE}})\n\n#{{CHANGELOG}}\n\n#{{UNCATEGORIZED}}",
              "categories": [
                {
                  "title": "### Features",
                  "labels": ["feat", "feature"]
                },
                {
                  "title": "### Bug Fixes", 
                  "labels": ["fix", "bug"]
                },
                {
                  "title": "### Documentation",
                  "labels": ["docs", "documentation"]
                },
                {
                  "title": "### Changes",
                  "labels": []
                }
              ],
              "label_extractor": [
                {
                  "pattern": "^(build|chore|ci|docs|feat|fix|perf|refactor|revert|style|test){1}(\\([\\w\\-\\.]+\\))?(!)?: ([\\w ])+([\\s\\S]*)",
                  "on_property": "title",
                  "target": "$1"
                }
              ],
              "transformers": [
                {
                  "pattern": "^(.*)$",
                  "target": "* $1"
                }
              ],
              "max_tags_to_fetch": 200,
              "max_back_track_time_days": 365,
              "sort": "ASC",
              "template_fallback": "## [#{{TO_TAG}}](https://github.com/ysmolyar/release-please-test/compare/#{{FROM_TAG}}...#{{TO_TAG}}) (#{{RELEASE_DATE}})\n\n### Changes\n\n#{{UNCATEGORIZED}}",
              "empty_template": "## [#{{TO_TAG}}](https://github.com/ysmolyar/release-please-test/compare/#{{FROM_TAG}}...#{{TO_TAG}}) (#{{RELEASE_DATE}})\n\n### Changes\n\n* No changes in this release",
              "trim_values": false
            }
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      
      - name: Update CHANGELOG.md
        run: |
          # Get the changelog content from the action
          changelog_content="${{ steps.changelog.outputs.changelog }}"
          
          # Create a temporary file with the new changelog entry
          echo "$changelog_content" > temp_changelog.md
          echo "" >> temp_changelog.md
          
          # If CHANGELOG.md exists, append it to the temp file
          if [ -f "CHANGELOG.md" ]; then
            # Skip the first line if it's just "# Changelog"
            if [ "$(head -n 1 CHANGELOG.md)" = "# Changelog" ]; then
              echo "# Changelog" > new_changelog.md
              echo "" >> new_changelog.md
              cat temp_changelog.md >> new_changelog.md
              tail -n +2 CHANGELOG.md >> new_changelog.md
            else
              echo "# Changelog" > new_changelog.md
              echo "" >> new_changelog.md
              cat temp_changelog.md >> new_changelog.md
              cat CHANGELOG.md >> new_changelog.md
            fi
          else
            echo "# Changelog" > new_changelog.md
            echo "" >> new_changelog.md
            cat temp_changelog.md >> new_changelog.md
          fi
          
          # Replace the original file
          mv new_changelog.md CHANGELOG.md
          rm temp_changelog.md
      
      - name: Commit and Push CHANGELOG.md
        run: |
          git config user.name "github-actions[bot]"
          git config user.email "41898282+github-actions[bot]@users.noreply.github.com"
          
          # Always commit changelog updates
          git add CHANGELOG.md
          git commit -m "docs: update changelog for ${{ steps.version.outputs.version }}"
          git push origin main
      
      - name: Create Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ steps.version.outputs.version }}
          body: ${{ steps.changelog.outputs.changelog }}
          draft: false
          prerelease: false
